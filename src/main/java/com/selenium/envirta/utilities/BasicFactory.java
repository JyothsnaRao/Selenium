package com.selenium.envirta.utilities;

import org.testng.Reporter;
import org.testng.annotations.Factory;
import org.testng.annotations.Parameters;

public class BasicFactory {

	
	@Factory
	@Parameters({ "drivers", "environments", "users", "testPath",
			"spreadsheet" })
	public Object[] testCaseFactory(String drivers, String environments,
			String users, String testPath, String spreadsheet) throws Exception {

		Object[][] factoryObjects = generateFactoryObjects(drivers,
				environments, users, spreadsheet);
		int numTests = calculateFactoryTestNumber(factoryObjects);
		int counter = 0;

		Object[] tests = new Object[numTests];

		for (int i = 0; i < factoryObjects[0].length; i++) {
			for (int j = 0; j < factoryObjects[1].length; j++) {
				for (int k = 0; k < factoryObjects[2].length; k++) {
					for (int l = 0; l < factoryObjects[3].length; l++) {
							tests[counter] = Class
									.forName(testPath)
									.getDeclaredConstructor(Browser.class,
											String.class, Environment.class,
											String.class)
									.newInstance(factoryObjects[0][i],
											factoryObjects[1][j],
											factoryObjects[2][k],
											factoryObjects[3][l]);
							counter++;
						}
					}
				}
			}
		
		return tests;

	}

	
	public Object[][] generateFactoryObjects(String drivers,
			String environments, String users, String spreadsheet)
			throws Exception {

		// Parse each parameter. Remove whitespace then split by comma
		String[] parsedDrivers = drivers.toLowerCase().replaceAll("\\s", "")
				.split(",");
		String[] parsedUsers = users.toLowerCase().replaceAll("\\s", "")
				.split(",");
		String[] parsedEnvironments = environments.toLowerCase()
				.replaceAll("\\s", "").split(",");
		String[] parsedSpreadsheet = spreadsheet.toLowerCase()
				.replaceAll("\\s", "").split(",");

		Object[][] factoryObjects = new Object[][] {
				new Object[parsedDrivers.length],
				new Object[parsedUsers.length],
				new Object[parsedEnvironments.length],
				new Object[parsedSpreadsheet.length]};

		// Create Browser enums
		for (int i = 0; i < parsedDrivers.length; i++) {
			if (parsedDrivers[i].equalsIgnoreCase("firefox")) {
				factoryObjects[0][i] = Browser.FIREFOX;
			} else if (parsedDrivers[i].equalsIgnoreCase("ie")) {
				factoryObjects[0][i] = Browser.IE;
			} else if (parsedDrivers[i].equalsIgnoreCase("chrome")) {
				factoryObjects[0][i] = Browser.CHROME;
			} else {
				Reporter.log("Invalid web browser identifier at " + (i + 1)
						+ " drivers parameter");
				throw new Exception(
						"Invalid web browser selection in drivers parameter");
			}
		}

		// Pass parsed userName Strings through as separate user properties file
		// names
		factoryObjects[1] = parsedUsers;
		
		// Pass parsed spreadsheet Strings through as separate spreadsheet properties file
		/// names
		factoryObjects[3] = parsedSpreadsheet;

		// Create Environment enums
		for (int i = 0; i < parsedEnvironments.length; i++) {
			if (parsedEnvironments[i].equalsIgnoreCase("qaenv")) {
				factoryObjects[2][i] = Environment.QAENV;
			} else if (parsedEnvironments[i].equalsIgnoreCase("devenv")) {
				factoryObjects[2][i] = Environment.DEVENV;
			} else if (parsedEnvironments[i].equalsIgnoreCase("uatenv")) {
				factoryObjects[2][i] = Environment.UATENV;
			} else if (parsedEnvironments[i].equalsIgnoreCase("stagingenv")) {
				factoryObjects[2][i] = Environment.STAGINGENV;
			} else {
				Reporter.log("Invalid environment identifier at " + (i + 1)
						+ " environments parameter");
				throw new Exception(
						"Invalid environment selection in environments parameter");
			}
		}

		return factoryObjects;
	}

	/**
	 * Calculates the total number of test instances that will be generated by
	 * the factory. Uses the following formula: #of Environments specified * #of
	 * users specified * #of Drivers specified = Total #of tests.
	 * 
	 * @param factoryStuff
	 * @return
	 */
	public int calculateFactoryTestNumber(Object[][] factoryStuff) {
		int totalTests = 1;

		for (int i = 0; i < factoryStuff.length; i++) {
			totalTests = factoryStuff[i].length * totalTests;
		}

		return totalTests;
	}
}
